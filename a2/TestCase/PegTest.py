import unittest
from grid_peg_solitaire_puzzle import GridPegSolitairePuzzle

class test_extension(unittest.TestCase):
    case1 =GridPegSolitairePuzzle([
        ["*", "*", "*", "*", "*"],
            ["*", "*", "*", "*", "*"],
            ["*", "*", "*", "*", "*"],
            ["*", "*", ".", "*", "*"],
            ["*", "*", "*", "*", "*"]], {"*", ".", "#"})

    ans1 = [GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'*', '#', '.'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['.', '.', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'*', '#', '.'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '.', '.'], ['*', '*', '*', '*', '*']], {'*', '#', '.'})]

    case2 = GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'*', '#', '.'})

    ans2 = [GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['.', '.', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'#', '.', '*'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '*', '.', '.'], ['*', '*', '.', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'#', '.', '*'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['.', '.', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'#', '.', '*'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '*', '.', '.'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'#', '.', '*'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '.', '*', '*']], {'#', '.', '*'})]

    case3 = GridPegSolitairePuzzle(
        [['*', '*', '*', '*', '*'],
         ['*', '*', '#', '*', '*'],
         ['*', '*', '.', '*', '*'],
         ['*', '*', '*', '*', '*'],
         ['*', '*', '*', '*', '*']], {'*', '#', '.'})

    ans3 = [GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '#', '*', '*'], ['.', '.', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'.', '*', '#'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '#', '*', '*'], ['*', '*', '*', '.', '.'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], {'.', '*', '#'}),
            GridPegSolitairePuzzle([['*', '*', '*', '*', '*'], ['*', '*', '#', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '.', '*', '*'], ['*', '*', '.', '*', '*']], {'.', '*', '#'})]

    case4 = GridPegSolitairePuzzle(
        [['.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.'],
         ['.', '.', '*', '.', '.'],
         ['.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.']], {'*', '#', '.'})
    ans4 = []

    case5 = GridPegSolitairePuzzle(
        [['.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.']], {'*', '#', '.'})

    def com(self, lst):
        return {str(i) for i in lst}
    def test_extensions(self):
        self.assertEqual(self.com(self.case1.extensions()), self.com(self.ans1))
        self.assertEqual(self.com(self.case2.extensions()), self.com(self.ans2))
        self.assertEqual(self.com(self.case3.extensions()), self.com(self.ans3), "You should not move to #")
        self.assertEqual(self.com(self.case4.extensions()), self.com(self.ans4))

    def test_is_solved(self):
        self.assertEqual(self.case4.is_solved(), True)
        self.assertEqual(self.case3.is_solved(), False)
        self.assertEqual(self.case5.is_solved(), False)

if __name__ == "__main__":
    unittest.main()